// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  name        String
  role        Role      @default(STUDENT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookmarks   Bookmark[]
  progress    Progress[]
  reviews     Review[]
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

// Educational Resources
model Resource {
  id          String     @id @default(uuid())
  title       String
  description String?    @db.Text
  url         String
  source      Source     @default(OTHER)
  type        Type
  subject     Subject    @relation(fields: [subjectId], references: [id])
  subjectId   String
  difficulty  Difficulty
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  bookmarks   Bookmark[]
  progress    Progress[]
  reviews     Review[]
}

enum Source {
  COURSERA
  EDX
  KHAN_ACADEMY
  YOUTUBE
  OTHER
}

enum Type {
  VIDEO
  ARTICLE
  COURSE
  DOCUMENT
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

// Subject Categories
model Subject {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?    @db.Text
  resources   Resource[]
}

// User Progress Tracking
model Progress {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  resource    Resource  @relation(fields: [resourceId], references: [id])
  resourceId  String
  status      Status    @default(IN_PROGRESS)
  percentage  Int       @default(0)
  lastAccessed DateTime @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, resourceId])
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

// Bookmarking System
model Bookmark {
  url          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  resource    Resource  @relation(fields: [resourceId], references: [id])
  resourceId  String
  createdAt   DateTime  @default(now())

  @@unique([userId, resourceId])
}

// Rating and Review System
model Review {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  resource    Resource  @relation(fields: [resourceId], references: [id])
  resourceId  String
  rating      Int       @db.SmallInt
  comment     String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, resourceId])
}
